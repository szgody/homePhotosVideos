// 导入必要的模块 Import required modules
const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs-extra');
const sharp = require('sharp');

// 创建Express应用 Create Express application
const app = express();

// 定义路径常量 Define path constants
const PATHS = {
  ORIGINAL: path.join(__dirname, '../public/images/original'),      // 原始图片目录 Original images directory
  PROCESSED: path.join(__dirname, '../public/images/processed'),    // 处理后的图片目录 Processed images directory
  THUMBNAILS: path.join(__dirname, '../data/photo_thumbnails'),     // 缩略图目录 Thumbnails directory
  SN_FILE: path.join(__dirname, '../data/photos/sn.txt')           // 序号文件 Serial number file
};

// 启用中间件 Enable middleware
app.use(cors());                // 启用跨域支持 Enable CORS
app.use(express.json());        // 解析JSON请求体 Parse JSON request body

// 初始化目录和序号文件 Initialize directories and serial number file
async function initializeDirectories() {
  try {
    // 确保所有必要的目录存在 Ensure all required directories exist
    await Promise.all([
      fs.ensureDir(PATHS.ORIGINAL),
      fs.ensureDir(PATHS.PROCESSED),
      fs.ensureDir(PATHS.THUMBNAILS)
    ]);
    
    // 确保序号文件存在 Ensure serial number file exists
    if (!await fs.pathExists(PATHS.SN_FILE)) {
      await fs.writeFile(PATHS.SN_FILE, '000001');
    }
    console.log('目录初始化完成 Directory initialization completed');
  } catch (error) {
    console.error('目录初始化失败 Directory initialization failed:', error);
    throw error;
  }
}

// 图片处理路由 Image processing route
app.post('/api/process-images', async (req, res) => {
  try {
    // 初始化目录 Initialize directories
    await initializeDirectories();
    
    // 读取序号 Read serial number
    let currentSN = '000001';
    try {
      currentSN = (await fs.readFile(PATHS.SN_FILE, 'utf8')).trim();
    } catch (error) {
      console.warn('读取序号文件失败，使用默认值 Failed to read serial number file, using default:', error);
    }

    // 获取所有图片 Get all images
    const files = await fs.readdir(PATHS.ORIGINAL);
    const imageFiles = files.filter(file => /\.(jpg|jpeg|png|gif)$/i.test(file));

    // 检查是否有图片需要处理 Check if there are images to process
    if (imageFiles.length === 0) {
      return res.json({ message: '没有找到需要处理的图片 No images found to process', results: [] });
    }

    const results = [];
    // 处理每张图片 Process each image
    for (const file of imageFiles) {
      try {
        const ext = path.extname(file);
        const newName = `${currentSN}${ext}`;
        
        console.log(`处理图片 Processing image: ${file} -> ${newName}`);

        // 处理原始图片 Process original image
        await sharp(path.join(PATHS.ORIGINAL, file))
          .resize(800, 800, { 
            fit: 'inside',
            withoutEnlargement: true 
          })
          .jpeg({ quality: 80 })
          .toFile(path.join(PATHS.PROCESSED, newName));

        // 生成缩略图 Generate thumbnail
        await sharp(path.join(PATHS.ORIGINAL, file))
          .resize(100, 100, { 
            fit: 'cover',
            position: 'centre'
          })
          .jpeg({ quality: 60 })
          .toFile(path.join(PATHS.THUMBNAILS, newName));

        // 记录处理结果 Record processing result
        results.push({
          originalName: file,
          newName: newName,
          sn: currentSN
        });

        // 更新序号 Update serial number
        currentSN = String(Number(currentSN) + 1).padStart(6, '0');
        await fs.writeFile(PATHS.SN_FILE, currentSN);
        
      } catch (error) {
        console.error(`处理图片失败 Failed to process image ${file}:`, error);
        results.push({
          originalName: file,
          error: error.message
        });
      }
    }

    // 返回处理结果 Return processing results
    res.json({
      message: '处理完成 Processing completed',
      total: imageFiles.length,
      success: results.filter(r => !r.error).length,
      failed: results.filter(r => r.error).length,
      results
    });

  } catch (error) {
    console.error('处理过程出错 Processing error:', error);
    res.status(500).json({ 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// 启动服务器 Start server
const port = 3000;
app.listen(port, () => {
  console.log(`后端服务器运行在 Backend server running at http://localhost:${port}`);
  console.log('支持的图片格式 Supported image formats: jpg, jpeg, png, gif');
  console.log(`原始图片目录 Original images directory: ${PATHS.ORIGINAL}`);
  console.log(`处理后图片目录 Processed images directory: ${PATHS.PROCESSED}`);
  console.log(`缩略图目录 Thumbnails directory: ${PATHS.THUMBNAILS}`);
});